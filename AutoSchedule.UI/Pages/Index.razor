@page "/"
@using SortOrder = Syncfusion.Blazor.Lists.SortOrder
@inject HttpClient Http
@inject AppDataService DataService
@inject AppDataServiceSingleton DataServiceSingleton
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<h3 class="ms-fontSize-42 ms-fontWeight-regular">Welcome to Auto Schedule</h3>
<p class="ms-fontSize-20 ms-fontWeight-regular">Arrange your academic schedule easily</p>
<br />

@if (!DataService.Initialized)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div id="available-courses-section">
                    <div id="course-list-label-section">
                        <h4>Available courses</h4>
                    </div>
                    <div id="course-filter-section">
                        <div style="margin: 0px 0px 8px">
                            <TextField Placeholder="Filter available courses" @bind-Value=SearchBoxText IconName="Search"/>
                        </div>
                    </div>
                </div>
                <div id="selected-courses-section">
                    <div id="course-list-label-section">
                        <h4>Selected courses</h4>
                    </div>
                    <div id="course-filter-section">
                        <DefaultButton Text="Make schedules" OnClick="OnClickMakeSchedule" />
                        @* The dialog should keep the ChildContent filed to avoid null ref exception. *@
                        <Dialog Title="Warning"
                                SubText=@NoClassSelectedPrompt
                                IsOpen=@noClassSelected
                                IsBlocking=false
                                DialogType=@DialogType.LargeHeader
                                OnDismiss=@(args=> noClassSelected=false )>
                            <ChildContent />
                            <FooterTemplate>
                                <PrimaryButton Text="OK" OnClick=@(args=> noClassSelected=false) />
                            </FooterTemplate>
                        </Dialog>
                        <Dialog Title="Warning"
                                SubText=@NoScheduleAvailablePrompt
                                IsOpen=@noAvailableSchedule
                                IsBlocking=false
                                DialogType=@DialogType.LargeHeader
                                OnDismiss=@(args=> noAvailableSchedule=false )>
                            <ChildContent />
                            <FooterTemplate>
                                <PrimaryButton Text="OK" OnClick=@(args=> noAvailableSchedule=false) />
                            </FooterTemplate>
                        </Dialog>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-5">
                <div>
                    @* bug here,  *@
                    <SfListView DataSource="@DataService.FilteredClasses"
                                ShowHeader="false"
                                Height="@ListBoxHeight"
                                TValue="string"
                                SortOrder="SortOrder.Ascending">
                        <ListViewEvents TValue="string"
                                        Clicked="@(e => selectedFilteredClass = e.ItemData)">
                        </ListViewEvents>
                    </SfListView>
                </div>
            </div>
            <div class="col-lg-1">
                <div>
                    <Stack Horizontal="false">
                        <ChildContent>
                            <DefaultButton Text=">>" />
                            <DefaultButton Text=">" OnClick="@SelectClass"/>
                            <DefaultButton Text="<" />
                            <DefaultButton Text="<<" />
                        </ChildContent>
                    </Stack>
                </div>
            </div>
            <div class="col-lg-6">
                <div>
                    <SfListView DataSource="@DataService.SelectedClasses"
                                ShowHeader="false"
                                Height="@ListBoxHeight">
                        <ListViewFieldSettings TValue="PriorityClass" Id="@nameof(PriorityClass.Name)" Text="@nameof(PriorityClass.Name)" />
                        <ListViewEvents TValue="PriorityClass"
                                        Clicked="@(e => selectedSelectedClass = e.ItemData)">
                        </ListViewEvents>
                        <ListViewTemplates TValue="PriorityClass">
                            <Template>
                                <span style="float:left; align-content:center;">@context.Name</span>
                                <span style="float: right;">
                                    <SfDropDownList TItem="string"
                                                    TValue="Priority"
                                                    @bind-Value="@context.Priority"
                                                    DataSource="@dropdownOptions">
                                    </SfDropDownList>
                                </span>
                            </Template>
                        </ListViewTemplates>
                    </SfListView>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-12">
                <h4>Available schedules</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <SfListBox TValue="string[]"
                           TItem="Schedule"
                           DataSource=@DataService.AvailableSchedules
                           @ref="availableSchedulesListBox"
                           Height="200px">
                    <ListBoxFieldSettings Text="Id" Value="Id" />
                    <ListBoxSelectionSettings Mode="Syncfusion.Blazor.DropDowns.SelectionMode.Single" />
                </SfListBox>
            </div>
            <div class="col-lg-6" style="margin: auto auto auto auto">
                <div class="row">
                    @* Placeholder for message bar *@
                </div>
                <div class="row">
                    <DefaultButton Text="View schedule" OnClick="OnClickViewSchedule" />
                </div>
            </div>
        </div>
        <br />
        <br />
    </div>
}

@code {
    private const string ListBoxHeight = "450px";
    
    private readonly string[] dropdownOptions = Enum.GetNames(typeof(Priority));

    private string selectedFilteredClass;
    private PriorityClass selectedSelectedClass;

    SfListBox<string[], Schedule> availableSchedulesListBox;

    private bool noAvailableSchedule = false;
    private const string NoScheduleAvailablePrompt = "There is no available schedule for selected classes.";

    private bool noClassSelected = false;
    private const string NoClassSelectedPrompt = "Cannot generate schedules: No class is selected.";

    private string SearchBoxText
    {
        get => DataService.SearchBoxText;
        set { DataService.SearchBoxText = value; OnFilterChanged(); }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await DataServiceSingleton.InitializeAsync();
        await DataService.InitializeAsync(DataServiceSingleton);
    }

    private void SelectClass()
    {
        if (selectedFilteredClass != null)
        {
            DataService.SelectedClasses.Add(new PriorityClass {Name = selectedFilteredClass, Priority = Priority.Required});
            DataService.FilteredClasses.Remove(selectedFilteredClass);
            selectedFilteredClass = null;
        }
    }

    /// <summary>
    /// Update FilteredSessions when text in search box changed.
    /// </summary>
    private void OnFilterChanged()
    {
        IEnumerable<string> filtered = FilterClasses(DataServiceSingleton.AvailableClasses, SearchBoxText);

        UpdateCollectionValue(DataService.FilteredClasses, filtered);
    }

    /// <summary>
    /// Filter given class list with provided keyword.
    /// </summary>
    /// <param name="allClasses">The list of classes to filter</param>
    /// <param name="filterRef">Filter keyword</param>
    /// <returns></returns>
    private static IEnumerable<string> FilterClasses(IEnumerable<string> allClasses, string filterRef)
        => allClasses.Where(c => c.StartsWith(filterRef, StringComparison.InvariantCultureIgnoreCase));

    /// <summary>
    /// Update a collection according to a IEnumerable reference.
    /// </summary>
    /// <param name="oldData">Collection to update</param>
    /// <param name="newData">Reference</param>
    private void UpdateCollectionValue(ICollection<string> oldData, IEnumerable<string> newData)
    {
        RemoveNonMatching(oldData, newData);
        AddBackMissing(oldData, newData);
    }

    /// <summary>
    /// Compare oldFilteredData with newFilteredData and remove non-matching data from the old one.
    /// </summary>
    private static void RemoveNonMatching(ICollection<string> oldData, IEnumerable<string> newData)
    {
        foreach (string item in oldData.Except(newData).ToList()) oldData.Remove(item);
    }

    /// <summary>
    /// Compare oldFilteredData with newFilteredData and add non-existing data to the old one.
    /// </summary>
    private void AddBackMissing(ICollection<string> oldData, IEnumerable<string> newData)
    {
        foreach (string item in newData.Except(oldData).ToList()) oldData.Add(item);
    }

    private void OnClickMakeSchedule()
    {
        // Alert user if no class is selected.
        if (DataService.SelectedClasses.Count == 0)
        {
            noClassSelected = true;
            return;
        }


        // select only lectures and generate the schedule.
        DataService.SelectedClasses.Clear();
        foreach (PriorityClass course in DataService.SelectedClasses)
        {
            DataService.FinalSelectedClasses.Add(
                new Course(DataServiceSingleton.AvailableSessions.First(g => g.Key == course.Name), course.Priority)
            );
        }
        List<Schedule> generatedSchedules = AutoSchedule.Core.Models.ClassSelector.FindSchedules(
            DataService.FinalSelectedClasses.OrderByDescending(c => c.Priority));

        // Alert user if there is no available schedule.
        if (generatedSchedules.Count == 0) noAvailableSchedule = true;

        DataService.AvailableSchedules.Clear();
        foreach (var item in generatedSchedules) DataService.AvailableSchedules.Add(item);
    }

    private void OnClickViewSchedule()
    {
        if (availableSchedulesListBox.Value == null) return;

        DataService.CurrentSchedule = DataService.AvailableSchedules
            .Where(s => s.Id == availableSchedulesListBox.Value[0]).FirstOrDefault();
        navigationManager.NavigateTo("schedulepage");
    }
}