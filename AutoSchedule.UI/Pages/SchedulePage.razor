@page "/schedulepage"
@inject AppDataService DataService
@inject AppDataServiceSingleton DataServiceSingleton

<h3 class="ms-fontSize-42 ms-fontWeight-regular">Schedules</h3>

@{
    if (!DataService.Initialized)  { <LoadingSpinner /> }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <Stack Horizontal="true" style="float: right">
                        <DefaultButton Text="Previous" 
                                       OnClick="ViewPreviousSchedule" 
                                       Disabled="@(CurrentScheduleIndex <= 1)" />
                        <Label>Schedule @DataService.CurrentSchedule.Id of @DataService.AvailableSchedules.Count</Label>
                        <DefaultButton Text="Next" 
                                       OnClick="ViewNextSchedule"
                                       Disabled="@(CurrentScheduleIndex >= DataService.AvailableSchedules.Count)"/>
                    </Stack>
                </div>
            </div>
            <br/>
            <div class="row">
                <div class="col-lg-12">
                    <AcademicCalendar ScheduleSource=@DataService.CurrentSchedule/>
                </div>
            </div>
            <br/>
            @if (!classConflictWarningVisible)
            {
                <br/>
            }
            @if (classConflictWarningVisible)
            {
                <div class="row">
                    <div class="col-lg-12">
                        <MessageBar MessageBarType=MessageBarType.Warning
                                    IsMultiline=false
                                    OnDismiss=@OnDismiss
                                    DismissButtonAriaLabel="Close">
                            The newly added session has conflict with existing schedule.
                        </MessageBar>
                    </div>
                </div>
                <br/>
            }
            <div class="row">
                <div class="col-lg-9">
                    <SfGrid DataSource="@DataServiceSingleton.AvailableSessionsFlat"
                            EnableVirtualization="true"
                            AllowSelection="false"
                            Toolbar=@tools
                            Height=@CourseSelectionHeight>
                        <GridSearchSettings Operator=Operator.Contains IgnoreCase="true" Fields="@searchFields"/>
                        <GridPageSettings PageSize="30"/>
                        <GridColumns>
                            <GridColumn Width="15%">
                                <Template>
                                    @{
                                        var session = (Session)context;
                                        bool disabled = DataService.CurrentSchedule.Sessions.Contains(session);

                                        void CheckAndAdd()
                                        {
                                            // add a new session only if it doesn't conflict with existing schedule
                                            if (DataService.CurrentSchedule.Validate(session))
                                            {
                                                DataService.CurrentSchedule.Sessions.Add(session);
                                                if (!DataService.CurrentSchedule.Id.Contains("*"))
                                                {
                                                    DataService.CurrentSchedule.Id += " *";
                                                }
                                            }
                                            else
                                            {
                                                classConflictWarningVisible = true;
                                            }
                                        }
                                    }
                                    <DefaultButton Text="Add" Disabled=@disabled OnClick=@CheckAndAdd/>
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(Session.Name) HeaderText="Name" TextAlign="TextAlign.Left" Width="20%"/>
                            <GridColumn Field=@nameof(Session.Code) HeaderText="Code" TextAlign="TextAlign.Left" Width="10%"/>
                            <GridColumn Field=@nameof(Session.Instructor) HeaderText="Instructor" TextAlign="TextAlign.Left" Width="20%"/>
                            <GridColumn Field=@nameof(Session.SessionTimesString) HeaderText="Time" TextAlign="TextAlign.Left" Width="45%"/>
                            @* todo: add location *@
                        </GridColumns>
                    </SfGrid>
                </div>
                <div class="col-lg-3">
                    <SfListView DataSource="@DataService.CurrentSchedule.Sessions"
                                Height=@CourseSelectionHeight
                                ShowHeader="true"
                                HeaderTitle="Selected sessions">
                        <ListViewFieldSettings TValue="Session" Id="Code" Text="Name"/>
                        <ListViewTemplates TValue="Session">
                            <Template>
                                @{
                                    void CheckAndDel()
                                    {
                                        DataService.CurrentSchedule.Sessions.Remove(context);
                                        if (!DataService.CurrentSchedule.Id.Contains("*"))
                                            DataService.CurrentSchedule.Id += " *";
                                    }

                                    ;
                                }
                                <span style="float: left; align-content: center;">
                                    <DefaultButton Text="Delete" OnClick=@CheckAndDel Style="margin: auto;"/>
                                </span>
                                <span style="float: right;">@context.Name</span>
                            </Template>
                        </ListViewTemplates>
                    </SfListView>
                </div>
            </div>
            <br/>
            <br/>
        </div>
    }
}

@code {
    private const string CourseSelectionHeight = "500px";

    private readonly string[] tools = { "Search" };

    private readonly string[] searchFields = { "Name", "Code" };

    private bool classConflictWarningVisible = false;

    private int CurrentScheduleIndex
    {
        get => DataService.CurrentSchedule.Id.EndsWith(" *")
            ? int.Parse(DataService.CurrentSchedule.Id[..^2])
            : int.Parse(DataService.CurrentSchedule.Id);
    }

    private void OnDismiss() => classConflictWarningVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await DataServiceSingleton.InitializeAsync();
        await DataService.InitializeAsync(DataServiceSingleton);
    }

    void ViewPreviousSchedule()
    {
        DataService.CurrentSchedule = DataService.AvailableSchedules[CurrentScheduleIndex - 2];
        throw new NotImplementedException();
    }

    void ViewNextSchedule()
    {
        DataService.CurrentSchedule = DataService.AvailableSchedules[CurrentScheduleIndex];
        throw new NotImplementedException();
    }

}